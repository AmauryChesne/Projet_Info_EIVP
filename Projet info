#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Nov 17 11:26:50 2020

@author: amaurychesne
"""

import pandas as pd
import numpy as np
from numpy import *
import matplotlib.pyplot as plt



def tri_liste(liste):
    L = list(liste) 
    N = len(L)
    for n in range(1,N):
        cle = L[n]
        j = n-1
        while j>=0 and L[j] > cle:
            L[j+1] = L[j] 
            j = j-1
        L[j+1] = cle
    return L

def inter(liste,debut,fin):
    debut=debut+'00:00:00 +0200'
    fin=fin+'23:59:59 +0200'
    L=[]
    for i in liste:
        if i>=debut and i<=fin:
            L.append(i)
    return L

def tri_int(a,b,c):
        L=[]
        j=0
        for i in c:
            while a[j] != i :
                j=j+1
            L.append(b[j])
            j=0
        return L
    
def maxi(liste):
    maxi = liste[0]
    for i in liste:
        if i >= maxi:
            maxi = i
    return maxi

def mini(liste):
    mini = liste[0]
    for i in liste:
        if i <= mini:
            mini = i
    return mini

def med(l):
    if len(l) % 2 == 0 :
        return (l[int(len(l)/2)]+l[int(len(l)/2 +1)])/2
    else:
        return l[int((len(l))//2 +1)]

def moy(l):
    a=0
    for i in l:
        a=a+i
    return a/len(l)

def variance(l):
    va=0
    for i in l:
        va=va +(i-moy(l))**2
    return va/len(l)

def ecart_t(l):
    return variance(l)**0.5

def T_rosee(l,h):
    L=[]
    for i in range (0,len(l)):
        a=(17.27*l[i])/(237.7+l[i])+np.log(h[i]/100)
        L.append((237.7*a)/(17.27-a))
    return L

def humidex(T,rosee):
    H=[]
    for i in range (0,len(T)):
        a=5417.7530*(1/273.16-1/(273.16+rosee[i]))
        H.append(T[i]+0.5555*(6.11*np.exp(a)-10))
    return H

def correlation(a,b):
    a1=tri_int(temps_trier,a,temps)
    b1=tri_int(temps_trier,b,temps)
    co=0
    for i in range (0,len(a1)):
             co=co+a1[i]*b1[i]
    co=co/len(a1) - (moy(a1)*moy(b1))
    co=co/(ecart_t(a1)*ecart_t(b1))
    return co

def tri_capteur(cap,don):
    cap1=[]
    cap2=[]
    cap3=[]
    cap4=[]
    cap5=[]
    cap6=[]
    for i in range (0,len(cap)):
        if cap[i]==1:
            cap1.append(don[i])
        if cap[i]==2:
                cap2.append(don[i])
        if cap[i]==3:
            cap3.append(don[i])
        if cap[i]==4:
            cap4.append(don[i])
        if cap[i]==5:
            cap5.append(don[i])
        else:
            cap6.append(don[i])
    return cap1,cap2,cap3,cap4,cap5,cap6

                
result=pd.read_csv("EIVP_KM.csv",sep=';')
t=result['sent_at'].tolist()
temps_trier=tri_liste(t)
co=result['co2'].tolist()
lum=result['lum'].tolist()
bruit=result['noise'].tolist()
capteur=result['id'].tolist()
temperature=result['temp'].tolist()
humidity=result['humidity'].tolist()

date=str(input("voulez vous rentrer une date de début et de fin ?"))
if date =='oui':   
   h_debut=str(input("entrer la date de début"))
   h_fin=str(input("entrer la date de fin"))
else:
    h_debut=temps_trier[0]
    h_fin=temps_trier[-1]
    
data1=str(input('Quelle donnée voulez vous regarder entre bruit, température, humidité, lumière et co2 ?' ))    
if data1 == 'bruit':
    data= bruit
if data1== 'température':
    data = temperature
if data1 == 'humidité':
    data = humidity
if data1 == 'lumière':
    data = lum
if data1 =='co2':
    data= co

data1er=str(input('Quelle première donnée voulez vous regarder entre bruit, température, humidité, lumière et co2 pour l indice de corélation ?' ))
if data1er == 'bruit':
    data_1= bruit
if data1er== 'température':
    data_1 =temperature
if data1er == 'humidité':
    data_1 = humidity
if data1er == 'lumière':
    data_1 = lum
if data1er =='co2':
    data_1 = co
    
data2eme=str(input('Quelle seconde donnée voulez vous regarder entre bruit, température, humidité, lumière et co2 pour l indice de corélation ?' ))
if data2eme == 'bruit':
    data_2= bruit
if data2eme== 'température':
    data_2 = temperature
if data2eme == 'humidité':
    data_2 = humidity
if data2eme == 'lumière':
    data_2 = lum
if data2eme =='co2':
    data_2 = co
    
   
temps=inter(temps_trier,h_debut,h_fin)
data_int=tri_int(t,data,temps)


humidity_trier=tri_int(temps_trier,humidity,temps)

tempe_trier=tri_int(temps_trier,temperature,temps)
Trose=T_rosee(tempe_trier,humidity_trier)



cap_bruit=tri_capteur(capteur,bruit)
cap_temperature=tri_capteur(capteur,temperature)
cap_humidite=tri_capteur(capteur,humidity)
cap_lumiere=tri_capteur(capteur,lum)
cap_co=tri_capteur(capteur,co)

plt.plot(temps,data_int,label=data1, color='blue')
y2=[maxi(data_int) for k in range(len(temps))] 
y3=[mini(data_int) for j in range(len(temps))]
l2=plt.plot(temps,y2 , ls='--', color='red')
l3=plt.plot(temps,y3 , ls='--', color='green')
plt.title('Titre')
plt.xlabel('Temps')
plt.ylabel('data')
plt.legend()
plt.figlegend((l2, l3), ('Maximum', 'Minimum'), 'upper left')
plt.tight_layout()
plt.legend()
plt.show()
plt.close()
plt.plot(temps,humidex(tempe_trier,Trose),label="humidex")
y2=[maxi(humidex(tempe_trier,Trose)) for k in range(len(temps))] 
y3=[mini(humidex(tempe_trier,Trose)) for k in range(len(temps))]
l2=plt.plot(temps,y2 , ls='--')
l3=plt.plot(temps,y3 , ls='--')
plt.title('Humidex en fonction du temps')
plt.xlabel('Temps')
plt.ylabel('Humidex')
plt.legend()
plt.figlegend((l2, l3), ('Maximum', 'Minimum'), 'upper left')
plt.tight_layout()
plt.legend()
plt.show()
plt.close()
print(correlation(data_1,data_2))